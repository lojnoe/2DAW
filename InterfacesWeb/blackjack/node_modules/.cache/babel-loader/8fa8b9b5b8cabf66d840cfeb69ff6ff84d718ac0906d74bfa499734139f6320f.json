{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lojno\\\\Desktop\\\\DAW\\\\2DAW\\\\InterfacesWeb\\\\blackjack\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\n\n// Definir los palos y los valores de las cartas\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst baraja_inicial = [{\n  nombre: '2_of_clubs.png',\n  valor: 2\n}, {\n  nombre: '3_of_clubs.png',\n  valor: 3\n}, {\n  nombre: '4_of_clubs.png',\n  valor: 4\n}, {\n  nombre: '5_of_clubs.png',\n  valor: 5\n}, {\n  nombre: '6_of_clubs.png',\n  valor: 6\n}, {\n  nombre: '7_of_clubs.png',\n  valor: 7\n}, {\n  nombre: '8_of_clubs.png',\n  valor: 8\n}, {\n  nombre: '9_of_clubs.png',\n  valor: 9\n}, {\n  nombre: '10_of_clubs.png',\n  valor: 10\n}, {\n  nombre: 'jack_of_clubs2.png',\n  valor: 10\n}, {\n  nombre: 'queen_of_clubs2.png',\n  valor: 10\n}, {\n  nombre: 'king_of_clubs2.png',\n  valor: 10\n}, {\n  nombre: 'ace_of_clubs.png',\n  valor: 11\n}, {\n  nombre: '2_of_diamonds.png',\n  valor: 2\n}, {\n  nombre: '3_of_diamonds.png',\n  valor: 3\n}, {\n  nombre: '4_of_diamonds.png',\n  valor: 4\n}, {\n  nombre: '5_of_diamonds.png',\n  valor: 5\n}, {\n  nombre: '6_of_diamonds.png',\n  valor: 6\n}, {\n  nombre: '7_of_diamonds.png',\n  valor: 7\n}, {\n  nombre: '8_of_diamonds.png',\n  valor: 8\n}, {\n  nombre: '9_of_diamonds.png',\n  valor: 9\n}, {\n  nombre: '10_of_diamonds.png',\n  valor: 10\n}, {\n  nombre: 'jack_of_diamonds2.png',\n  valor: 10\n}, {\n  nombre: 'queen_of_diamonds2.png',\n  valor: 10\n}, {\n  nombre: 'king_of_diamonds2.png',\n  valor: 10\n}, {\n  nombre: 'ace_of_diamonds.png',\n  valor: 11\n}, {\n  nombre: '2_of_hearts.png',\n  valor: 2\n}, {\n  nombre: '3_of_hearts.png',\n  valor: 3\n}, {\n  nombre: '4_of_hearts.png',\n  valor: 4\n}, {\n  nombre: '5_of_hearts.png',\n  valor: 5\n}, {\n  nombre: '6_of_hearts.png',\n  valor: 6\n}, {\n  nombre: '7_of_hearts.png',\n  valor: 7\n}, {\n  nombre: '8_of_hearts.png',\n  valor: 8\n}, {\n  nombre: '9_of_hearts.png',\n  valor: 9\n}, {\n  nombre: '10_of_hearts.png',\n  valor: 10\n}, {\n  nombre: 'jack_of_hearts2.png',\n  valor: 10\n}, {\n  nombre: 'queen_of_hearts2.png',\n  valor: 10\n}, {\n  nombre: 'king_of_hearts2.png',\n  valor: 10\n}, {\n  nombre: 'ace_of_hearts.png',\n  valor: 11\n}, {\n  nombre: '2_of_spades.png',\n  valor: 2\n}, {\n  nombre: '3_of_spades.png',\n  valor: 3\n}, {\n  nombre: '4_of_spades.png',\n  valor: 4\n}, {\n  nombre: '5_of_spades.png',\n  valor: 5\n}, {\n  nombre: '6_of_spades.png',\n  valor: 6\n}, {\n  nombre: '7_of_spades.png',\n  valor: 7\n}, {\n  nombre: '8_of_spades.png',\n  valor: 8\n}, {\n  nombre: '9_of_spades.png',\n  valor: 9\n}, {\n  nombre: '10_of_spades.png',\n  valor: 10\n}, {\n  nombre: 'jack_of_spades2.png',\n  valor: 10\n}, {\n  nombre: 'queen_of_spades2.png',\n  valor: 10\n}, {\n  nombre: 'king_of_spades2.png',\n  valor: 10\n}, {\n  nombre: 'ace_of_spades.png',\n  valor: 11\n}];\n\n// Función para barajar la baraja de cartas usando el algoritmo Fisher-Yates\nfunction shuffleDeck(deck) {\n  // Crear una copia del array original para evitar modificarlo\n  const shuffledDeck = [...deck];\n\n  // Algoritmo de barajado Fisher-Yates\n  for (let i = shuffledDeck.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    // Intercambiar elementos en los índices i y j\n    [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\n  }\n  return shuffledDeck;\n}\n\n// Componente principal de la aplicación\nconst App = () => {\n  _s();\n  // Estados para las cartas del jugador, del crupier, carta extra, etc.\n  const [playerCards, setPlayerCards] = useState([]);\n  const [dealerCards, setDealerCards] = useState([]);\n  const [hitCard, setHitCard] = useState([]);\n  const [showDealerFirstCard, setShowDealerFirstCard] = useState(false);\n  const [shuffledDeck, setShuffledDeck] = useState([]);\n  const [gameInProgress, setGameInProgress] = useState(true);\n  const [showRestartButton, setShowRestartButton] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [playerScore, setPlayerScore] = useState(0);\n  const [dealerScore, setDealerScore] = useState(0);\n\n  // Efecto para inicializar la baraja y repartir las cartas al comienzo del juego\n  useEffect(() => {\n    if (!gameInProgress) return;\n    // Barajar la baraja inicial y establecerla en el estado\n    const initialDeck = shuffleDeck([...baraja_inicial]);\n    setShuffledDeck(initialDeck);\n\n    // Repartir cartas al jugador y al crupier al principio del juego\n    const initialPlayerCards = [initialDeck.pop()];\n    setPlayerCards(initialPlayerCards);\n    const initialDealerCards = [initialDeck.pop(), {\n      nombre: 'back.png',\n      valor: 0\n    }];\n    setDealerCards(initialDealerCards);\n    setPlayerScore(calculateScore(initialPlayerCards));\n    setDealerScore(calculateScore(initialDealerCards));\n  }, [gameInProgress]);\n\n  // Función para tomar una carta extra (\"hit\")\n  const handleHit = () => {\n    if (!gameInProgress) return;\n    const card = shuffledDeck.pop(); // Sacar una carta del mazo barajado\n    setHitCard(card); // Establecer la carta extra en el estado\n    const updatedPlayerCards = [...playerCards, card]; // Añadir la carta extra a la mano del jugador\n\n    // Calcular la puntuación del jugador con la nueva carta\n    const updatedPlayerScore = calculateScore(updatedPlayerCards);\n\n    // Verificar si el jugador se ha pasado de 21\n    if (updatedPlayerScore > 21) {\n      setPlayerCards([...playerCards, card]);\n      setGameInProgress(false);\n      setShowRestartButton(true);\n      const newMessage = \"¡Te has pasado de 21! ¡Has perdido!\";\n      setMessages([...messages, newMessage]);\n      setPlayerScore(updatedPlayerScore);\n      // Aquí puedes manejar la lógica para indicar al jugador que ha perdido, como actualizar el estado o mostrar un mensaje al usuario\n    } else {\n      setPlayerScore(updatedPlayerScore);\n      setPlayerCards([...playerCards, card]); // Actualizar la mano del jugador solo si no se ha pasado de 21\n    }\n  };\n\n  // Función para manejar la acción de plantarse\n  const handleStand = () => {\n    if (!gameInProgress) return;\n    setShowDealerFirstCard(true);\n    let dealerHand = [...dealerCards];\n    let suma;\n    // funcion para quitarl y poner otra \n    if (dealerCards.some(card => card.valor === 0)) {\n      dealerHand = dealerHand.slice(0, 1).concat(dealerHand.slice(2));\n      const card = shuffledDeck.pop();\n      dealerHand.push(card);\n      setDealerCards(dealerHand);\n      suma = calculateScore(dealerHand);\n      setDealerScore(suma);\n    }\n\n    // Repartir cartas al crupier hasta que la suma sea 17 o >\n    while (suma < 17) {\n      const card = shuffledDeck.pop();\n      dealerHand = [...dealerHand, card];\n      setDealerCards(dealerHand);\n      suma = calculateScore(dealerHand);\n      setDealerScore(suma);\n    }\n    compareScores(suma);\n    const resultado = compareScores(suma);\n    setMessages([...messages, resultado]);\n    setGameInProgress(false);\n    setShowRestartButton(true);\n  };\n\n  // Función para calcular el valor total de las cartas\n  const calculateScore = cards => {\n    return cards.reduce((total, card) => total + card.valor, 0);\n  };\n\n  // Funcion para comparar y decidir resultado\n  const compareScores = suma => {\n    if (playerScore === 21) {\n      // Blackjack del jugador\n      return \"¡Blackjack! El jugador gana.\";\n    } else if (suma === 21) {\n      // Blackjack del crupier\n      return \"¡Blackjack! El crupier gana.\";\n    } else if (playerScore > 21) {\n      // El jugador ha perdido\n      return \"¡Te has pasado de 21! ¡Has perdido.\";\n    } else if (suma > 21) {\n      // El crupier ha perdido\n      return \"El crupier ha perdido.\";\n    } else if (playerScore > suma) {\n      // El jugador gana\n      return \"El jugador gana.\";\n    } else if (suma > playerScore) {\n      // El crupier gana\n      return \"El crupier gana.\";\n    } else {\n      // Empate\n      return \"¡Es un empate!\";\n    }\n  };\n  const handleDealer = () => {\n    if (!gameInProgress) return;\n    let updatedDealerCards = [...dealerCards]; // Copia la mano actual del crupier\n    const card = shuffledDeck.pop(); // Saca una carta del mazo barajado\n    updatedDealerCards.push(card); // Agrega la carta a la mano del crupier\n    let suma = calculateScore(updatedDealerCards);\n    if (suma > 21) {\n      const newMessage = \"¡Te has pasado de 21! ¡Has perdido!\";\n      setMessages([...messages, newMessage]);\n      setGameInProgress(false);\n      setShowRestartButton(true);\n    }\n    setDealerScore(suma);\n    setDealerCards(updatedDealerCards); // Actualiza la mano del crupier\n  };\n  const handleRestart = () => {\n    // Reiniciar el juego\n    setGameInProgress(true);\n    setShowRestartButton(false);\n    setPlayerCards([]);\n    setDealerCards([]);\n    setHitCard([]);\n    setShowDealerFirstCard(false);\n    setMessages([]);\n    setShuffledDeck(shuffleDeck([...baraja_inicial]));\n    setPlayerScore(0);\n    setDealerScore(0);\n  };\n  // Interfaz de usuario\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"root\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Puntuaci\\xF3n del Crupier: \", dealerScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 11\n        }, this), dealerCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `./assets/PNG/${index === 1 && !showDealerFirstCard ? 'back.png' : card.nombre}`,\n          alt: card.nombre,\n          style: {\n            width: '100px',\n            height: '150px'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleDealer,\n          disabled: !gameInProgress,\n          children: \"Pedir carta crupier\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 11\n        }, this), showRestartButton && /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          children: \"Reiniciar Partida\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 33\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Puntuaci\\xF3n del Jugador: \", playerScore]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 11\n        }, this), playerCards.map((card, index) => /*#__PURE__*/_jsxDEV(\"img\", {\n          src: `./assets/PNG/${card.nombre}`,\n          alt: card.nombre,\n          style: {\n            width: '100px',\n            height: '150px'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleHit,\n          disabled: !gameInProgress,\n          children: \"Pedir carta\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStand,\n          disabled: !gameInProgress,\n          children: \"Plantarse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n          children: message\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"2mlYh4YcsFtlNrKEZGvq7c+yBUA=\");\n_c = App;\nexport default App;\n\n/* Estados para la baraja de cartas, mano del jugador, mano del crupier y estado del juego\r\n  const [deck, setDeck] = useState([]);\r\n  const [playerHand, setPlayerHand] = useState([]);\r\n  const [dealerHand, setDealerHand] = useState([]);\r\n  const [shuffledDeck, setShuffledDeck] = useState([]);\r\n  const [hitCard,setHitCard] = useState([]);\r\n  */\n\n/* Función para inicializar la baraja con el array de cartas\r\n  const initializeDeck = () => {\r\n    // Copiar el array de cartas para evitar mutar el original\r\n    const newDeck = [...baraja_inicial];\r\n    // Barajar la baraja\r\n    shuffleDeck(newDeck);\r\n    // Establecer la nueva baraja en el estado\r\n    setDeck(newDeck);\r\n  };\r\n\r\n  \r\n\r\n\r\n  // Función para repartir cartas a jugador y crupier\r\n  const dealCards = () => {\r\n    // Repartir dos cartas al jugador y dos al crupier\r\n    setPlayerHand([drawCard(), drawCard()]);\r\n    setDealerHand([drawCard(), { carta: \"back.png\", valor: 0 }]);\r\n  };\r\n\r\n  // Función para tomar una carta de la baraja\r\n  const drawCard = () => {\r\n    // Si la baraja está vacía, inicializar una nueva baraja\r\n    if (deck.length === 0) initializeDeck();\r\n    // Tomar una carta de la baraja (última carta)\r\n    return deck.pop();\r\n  };\r\n*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","baraja_inicial","nombre","valor","shuffleDeck","deck","shuffledDeck","i","length","j","Math","floor","random","App","_s","playerCards","setPlayerCards","dealerCards","setDealerCards","hitCard","setHitCard","showDealerFirstCard","setShowDealerFirstCard","setShuffledDeck","gameInProgress","setGameInProgress","showRestartButton","setShowRestartButton","messages","setMessages","playerScore","setPlayerScore","dealerScore","setDealerScore","initialDeck","initialPlayerCards","pop","initialDealerCards","calculateScore","handleHit","card","updatedPlayerCards","updatedPlayerScore","newMessage","handleStand","dealerHand","suma","some","slice","concat","push","compareScores","resultado","cards","reduce","total","handleDealer","updatedDealerCards","handleRestart","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","index","src","alt","style","width","height","onClick","disabled","message","_c","$RefreshReg$"],"sources":["C:/Users/lojno/Desktop/DAW/2DAW/InterfacesWeb/blackjack/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\n// Definir los palos y los valores de las cartas\r\n\r\nconst baraja_inicial = [\r\n  { nombre: '2_of_clubs.png', valor: 2 },\r\n  { nombre: '3_of_clubs.png', valor: 3 },\r\n  { nombre: '4_of_clubs.png', valor: 4 },\r\n  { nombre: '5_of_clubs.png', valor: 5 },\r\n  { nombre: '6_of_clubs.png', valor: 6 },\r\n  { nombre: '7_of_clubs.png', valor: 7 },\r\n  { nombre: '8_of_clubs.png', valor: 8 },\r\n  { nombre: '9_of_clubs.png', valor: 9 },\r\n  { nombre: '10_of_clubs.png', valor: 10 },\r\n  { nombre: 'jack_of_clubs2.png', valor: 10 },\r\n  { nombre: 'queen_of_clubs2.png', valor: 10 },\r\n  { nombre: 'king_of_clubs2.png', valor: 10 },\r\n  { nombre: 'ace_of_clubs.png', valor: 11 },\r\n  { nombre: '2_of_diamonds.png', valor: 2 },\r\n  { nombre: '3_of_diamonds.png', valor: 3 },\r\n  { nombre: '4_of_diamonds.png', valor: 4 },\r\n  { nombre: '5_of_diamonds.png', valor: 5 },\r\n  { nombre: '6_of_diamonds.png', valor: 6 },\r\n  { nombre: '7_of_diamonds.png', valor: 7 },\r\n  { nombre: '8_of_diamonds.png', valor: 8 },\r\n  { nombre: '9_of_diamonds.png', valor: 9 },\r\n  { nombre: '10_of_diamonds.png', valor: 10 },\r\n  { nombre: 'jack_of_diamonds2.png', valor: 10 },\r\n  { nombre: 'queen_of_diamonds2.png', valor: 10 },\r\n  { nombre: 'king_of_diamonds2.png', valor: 10 },\r\n  { nombre: 'ace_of_diamonds.png', valor: 11 },\r\n  { nombre: '2_of_hearts.png', valor: 2 },\r\n  { nombre: '3_of_hearts.png', valor: 3 },\r\n  { nombre: '4_of_hearts.png', valor: 4 },\r\n  { nombre: '5_of_hearts.png', valor: 5 },\r\n  { nombre: '6_of_hearts.png', valor: 6 },\r\n  { nombre: '7_of_hearts.png', valor: 7 },\r\n  { nombre: '8_of_hearts.png', valor: 8 },\r\n  { nombre: '9_of_hearts.png', valor: 9 },\r\n  { nombre: '10_of_hearts.png', valor: 10 },\r\n  { nombre: 'jack_of_hearts2.png', valor: 10 },\r\n  { nombre: 'queen_of_hearts2.png', valor: 10 },\r\n  { nombre: 'king_of_hearts2.png', valor: 10 },\r\n  { nombre: 'ace_of_hearts.png', valor: 11 },\r\n  { nombre: '2_of_spades.png', valor: 2 },\r\n  { nombre: '3_of_spades.png', valor: 3 },\r\n  { nombre: '4_of_spades.png', valor: 4 },\r\n  { nombre: '5_of_spades.png', valor: 5 },\r\n  { nombre: '6_of_spades.png', valor: 6 },\r\n  { nombre: '7_of_spades.png', valor: 7 },\r\n  { nombre: '8_of_spades.png', valor: 8 },\r\n  { nombre: '9_of_spades.png', valor: 9 },\r\n  { nombre: '10_of_spades.png', valor: 10 },\r\n  { nombre: 'jack_of_spades2.png', valor: 10 },\r\n  { nombre: 'queen_of_spades2.png', valor: 10 },\r\n  { nombre: 'king_of_spades2.png', valor: 10 },\r\n  { nombre: 'ace_of_spades.png', valor: 11 },\r\n];\r\n\r\n// Función para barajar la baraja de cartas usando el algoritmo Fisher-Yates\r\nfunction shuffleDeck(deck) {\r\n  // Crear una copia del array original para evitar modificarlo\r\n  const shuffledDeck = [...deck];\r\n\r\n  // Algoritmo de barajado Fisher-Yates\r\n  for (let i = shuffledDeck.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    // Intercambiar elementos en los índices i y j\r\n    [shuffledDeck[i], shuffledDeck[j]] = [shuffledDeck[j], shuffledDeck[i]];\r\n  }\r\n\r\n  return shuffledDeck;\r\n}\r\n\r\n// Componente principal de la aplicación\r\nconst App = () => {\r\n  // Estados para las cartas del jugador, del crupier, carta extra, etc.\r\n  const [playerCards, setPlayerCards] = useState([]);\r\n  const [dealerCards, setDealerCards] = useState([]);\r\n  const [hitCard, setHitCard] = useState([]);\r\n  const [showDealerFirstCard, setShowDealerFirstCard] = useState(false);\r\n  const [shuffledDeck, setShuffledDeck] = useState([]);\r\n  const [gameInProgress, setGameInProgress] = useState(true);\r\n  const [showRestartButton, setShowRestartButton] = useState(false);\r\n  const [messages, setMessages] = useState([]);\r\n  const [playerScore, setPlayerScore] = useState(0);\r\n  const [dealerScore, setDealerScore] = useState(0);\r\n\r\n\r\n\r\n  // Efecto para inicializar la baraja y repartir las cartas al comienzo del juego\r\n  useEffect(() => {\r\n    if (!gameInProgress) return;\r\n    // Barajar la baraja inicial y establecerla en el estado\r\n    const initialDeck = shuffleDeck([...baraja_inicial]);\r\n    setShuffledDeck(initialDeck);\r\n\r\n    // Repartir cartas al jugador y al crupier al principio del juego\r\n    const initialPlayerCards = [initialDeck.pop()];\r\n    setPlayerCards(initialPlayerCards);\r\n\r\n    const initialDealerCards = [initialDeck.pop(), { nombre: 'back.png', valor: 0 }];\r\n    setDealerCards(initialDealerCards);\r\n\r\n    setPlayerScore(calculateScore(initialPlayerCards));\r\n    setDealerScore(calculateScore(initialDealerCards));\r\n  }, [gameInProgress]);\r\n\r\n  // Función para tomar una carta extra (\"hit\")\r\n  const handleHit = () => {\r\n\r\n    if (!gameInProgress) return;\r\n\r\n    const card = shuffledDeck.pop(); // Sacar una carta del mazo barajado\r\n    setHitCard(card); // Establecer la carta extra en el estado\r\n    const updatedPlayerCards = [...playerCards, card]; // Añadir la carta extra a la mano del jugador\r\n\r\n    // Calcular la puntuación del jugador con la nueva carta\r\n    const updatedPlayerScore = calculateScore(updatedPlayerCards);\r\n\r\n    // Verificar si el jugador se ha pasado de 21\r\n    if (updatedPlayerScore > 21) {\r\n      setPlayerCards([...playerCards, card]);\r\n      setGameInProgress(false);\r\n      setShowRestartButton(true);\r\n      const newMessage = \"¡Te has pasado de 21! ¡Has perdido!\";\r\n      setMessages([...messages, newMessage]);\r\n      setPlayerScore(updatedPlayerScore);\r\n      // Aquí puedes manejar la lógica para indicar al jugador que ha perdido, como actualizar el estado o mostrar un mensaje al usuario\r\n    } else {\r\n      setPlayerScore(updatedPlayerScore);\r\n      setPlayerCards([...playerCards, card]); // Actualizar la mano del jugador solo si no se ha pasado de 21\r\n    }\r\n\r\n\r\n\r\n  };\r\n\r\n  // Función para manejar la acción de plantarse\r\n  const handleStand = () => {\r\n    if (!gameInProgress) return;\r\n    setShowDealerFirstCard(true);\r\n    \r\n    let dealerHand = [...dealerCards];\r\n    let suma;\r\n    // funcion para quitarl y poner otra \r\n    if (dealerCards.some(card => card.valor === 0)) {\r\n      dealerHand = dealerHand.slice(0, 1).concat(dealerHand.slice(2));\r\n      const card = shuffledDeck.pop();\r\n      dealerHand.push(card);\r\n      setDealerCards(dealerHand);\r\n      suma = calculateScore(dealerHand);\r\n      setDealerScore(suma);\r\n\r\n    }\r\n\r\n    // Repartir cartas al crupier hasta que la suma sea 17 o >\r\n    while (suma < 17) {\r\n      const card = shuffledDeck.pop();\r\n      dealerHand = [...dealerHand, card];\r\n      setDealerCards(dealerHand)\r\n      suma = calculateScore(dealerHand);\r\n      setDealerScore(suma);\r\n\r\n    }\r\n    compareScores(suma);\r\n    const resultado = compareScores(suma);\r\n    setMessages([...messages, resultado]);\r\n    setGameInProgress(false);\r\n    setShowRestartButton(true);\r\n  };\r\n\r\n  // Función para calcular el valor total de las cartas\r\n  const calculateScore = (cards) => {\r\n\r\n    return cards.reduce((total, card) => total + card.valor, 0);\r\n  };\r\n\r\n  // Funcion para comparar y decidir resultado\r\n  const compareScores = (suma) => {\r\n    if (playerScore === 21) {\r\n      // Blackjack del jugador\r\n      return \"¡Blackjack! El jugador gana.\";\r\n    } else if (suma === 21) {\r\n      // Blackjack del crupier\r\n      return \"¡Blackjack! El crupier gana.\";\r\n    } else if (playerScore > 21) {\r\n      // El jugador ha perdido\r\n      return \"¡Te has pasado de 21! ¡Has perdido.\";\r\n    } else if (suma > 21) {\r\n      // El crupier ha perdido\r\n      return \"El crupier ha perdido.\";\r\n    } else if (playerScore > suma) {\r\n      // El jugador gana\r\n      return \"El jugador gana.\";\r\n    } else if (suma > playerScore) {\r\n      // El crupier gana\r\n      return \"El crupier gana.\";\r\n    } else {\r\n      // Empate\r\n      return \"¡Es un empate!\";\r\n    }\r\n  };\r\n\r\n  const handleDealer = () => {\r\n    if (!gameInProgress) return;\r\n    let updatedDealerCards = [...dealerCards]; // Copia la mano actual del crupier\r\n    const card = shuffledDeck.pop(); // Saca una carta del mazo barajado\r\n    updatedDealerCards.push(card); // Agrega la carta a la mano del crupier\r\n    let suma = calculateScore(updatedDealerCards);\r\n    if (suma > 21) {\r\n      const newMessage = \"¡Te has pasado de 21! ¡Has perdido!\";\r\n      setMessages([...messages, newMessage]);\r\n      setGameInProgress(false);\r\n      setShowRestartButton(true);\r\n    }\r\n    setDealerScore(suma);\r\n    setDealerCards(updatedDealerCards); // Actualiza la mano del crupier\r\n\r\n  }\r\n  const handleRestart = () => {\r\n    // Reiniciar el juego\r\n    setGameInProgress(true);\r\n    setShowRestartButton(false);\r\n    setPlayerCards([]);\r\n    setDealerCards([]);\r\n    setHitCard([]);\r\n    setShowDealerFirstCard(false);\r\n    setMessages([]);\r\n    setShuffledDeck(shuffleDeck([...baraja_inicial]));\r\n    setPlayerScore(0);\r\n    setDealerScore(0);\r\n  };\r\n  // Interfaz de usuario\r\n  return (\r\n    <div className=\"root\">\r\n      <div>\r\n        <div>\r\n          <h2>Puntuación del Crupier: {dealerScore}</h2>\r\n          {/* Mostrar las cartas del crupier, ocultando la primera carta si aún no se ha revelado */}\r\n          {dealerCards.map((card, index) => (\r\n            <img\r\n              key={index}\r\n              src={`./assets/PNG/${index === 1 && !showDealerFirstCard ? 'back.png' : card.nombre}`}\r\n              alt={card.nombre}\r\n              style={{ width: '100px', height: '150px' }}\r\n            />\r\n          ))}\r\n        </div>\r\n        <div>\r\n          {/* Botones para pedir una carta adicional (\"hit\") o plantarse */}\r\n\r\n          <button onClick={handleDealer} disabled={!gameInProgress}>Pedir carta crupier</button>\r\n          {showRestartButton && <button onClick={handleRestart}>Reiniciar Partida</button>}\r\n        </div>\r\n        <div>\r\n          <h2>Puntuación del Jugador: {playerScore}</h2>\r\n          {/* Mostrar las cartas del jugador */}\r\n          {playerCards.map((card, index) => (\r\n            <img\r\n              key={index}\r\n              src={`./assets/PNG/${card.nombre}`}\r\n              alt={card.nombre}\r\n              style={{ width: '100px', height: '150px' }}\r\n            />\r\n          ))}\r\n          <br></br>\r\n          <button onClick={handleHit} disabled={!gameInProgress}>Pedir carta</button>\r\n          <button onClick={handleStand} disabled={!gameInProgress}>Plantarse</button>\r\n        </div>\r\n        <div>\r\n          {messages.map((message, index) => (\r\n            <p key={index}>{message}</p>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n/* Estados para la baraja de cartas, mano del jugador, mano del crupier y estado del juego\r\n  const [deck, setDeck] = useState([]);\r\n  const [playerHand, setPlayerHand] = useState([]);\r\n  const [dealerHand, setDealerHand] = useState([]);\r\n  const [shuffledDeck, setShuffledDeck] = useState([]);\r\n  const [hitCard,setHitCard] = useState([]);\r\n  */\r\n\r\n/* Función para inicializar la baraja con el array de cartas\r\n  const initializeDeck = () => {\r\n    // Copiar el array de cartas para evitar mutar el original\r\n    const newDeck = [...baraja_inicial];\r\n    // Barajar la baraja\r\n    shuffleDeck(newDeck);\r\n    // Establecer la nueva baraja en el estado\r\n    setDeck(newDeck);\r\n  };\r\n\r\n  \r\n\r\n\r\n  // Función para repartir cartas a jugador y crupier\r\n  const dealCards = () => {\r\n    // Repartir dos cartas al jugador y dos al crupier\r\n    setPlayerHand([drawCard(), drawCard()]);\r\n    setDealerHand([drawCard(), { carta: \"back.png\", valor: 0 }]);\r\n  };\r\n\r\n  // Función para tomar una carta de la baraja\r\n  const drawCard = () => {\r\n    // Si la baraja está vacía, inicializar una nueva baraja\r\n    if (deck.length === 0) initializeDeck();\r\n    // Tomar una carta de la baraja (última carta)\r\n    return deck.pop();\r\n  };\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}